{"version":3,"sources":["components/navbar/NavBar.js","components/shopping-list/ShoppingList.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","setState","isOpen","state","react_default","a","createElement","reactstrap_es","color","dark","expand","href","onClick","navbar","className","Component","ShoppingList","items","id","uuid","name","_this2","style","margin","prompt","toConsumableArray","concat","map","_ref","react_transition_group","key","timeout","classNames","size","filter","item","App","navbar_NavBar","shopping_list_ShoppingList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kRAkDeA,cAhCX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMVQ,OAAS,WACLP,EAAKQ,SAAS,CACVC,QAAST,EAAKU,MAAMD,UAPxBT,EAAKU,MAAQ,CACTD,QAAQ,GAHGT,wEAcf,OACIW,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,MAAM,OAAOC,MAAI,EAAEC,OAAO,MAC9BN,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAaI,KAAK,KAAlB,sBACAP,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAeK,QAAShB,KAAKI,SAC7BI,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUL,OAAQN,KAAKO,MAAMD,OAAQW,QAAM,GACvCT,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKO,UAAU,UAAUD,QAAM,GAC3BT,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASI,KAAK,KAAd,sBAvBXI,8CC4CNC,6MAtDXb,MAAQ,CACJc,MAAO,CACH,CAAEC,GAAIC,MAAQC,KAAM,QACpB,CAAEF,GAAIC,MAAQC,KAAM,QACpB,CAAEF,GAAIC,MAAQC,KAAM,UACpB,CAAEF,GAAIC,MAAQC,KAAM,mFAGnB,IAAAC,EAAAzB,KACGqB,EAAUrB,KAAKO,MAAfc,MACR,OACIb,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACIC,MAAM,OACNc,MAAO,CAAEC,OAAQ,iBACjBX,QAAS,WACL,IAAMQ,EAAOI,OAAO,cAChBJ,GACAC,EAAKpB,SAAS,SAAAE,GAAK,MAAK,CACpBc,MAAMvB,OAAA+B,EAAA,EAAA/B,CAAKS,EAAMc,OAAZS,OAAA,CAAmB,CAAER,GAAIC,MAAQC,eAPtD,YAeAhB,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACKU,EAAMU,IAAI,SAAAC,GAAA,IAAEV,EAAFU,EAAEV,GAAIE,EAANQ,EAAMR,KAAN,OACPhB,EAAAC,EAAAC,cAACuB,EAAA,cAAD,CAAeC,IAAKZ,EAAIa,QAAS,IAAKC,WAAW,QAC7C5B,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACKa,EACDhB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACIyB,WAAW,aACXV,MAAO,CAAEC,OAAQ,SACjBf,MAAM,SACNyB,KAAK,KACLrB,QAAS,WACLS,EAAKpB,SAAS,SAAAE,GAAK,MAAK,CACpBc,MAAOd,EAAMc,MAAMiB,OAAO,SAAAC,GAAI,OAAIA,EAAKjB,KAAOA,SAP1D,kBAjCLH,aCWZqB,mLATX,OACEhC,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACbV,EAAAC,EAAAC,cAAC+B,EAAD,MACAjC,EAAAC,EAAAC,cAACgC,EAAD,cALUvB,aCMEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.44424c72.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    UncontrolledDropdown,\r\n    DropdownToggle,\r\n    DropdownMenu,\r\n    DropdownItem\r\n} from 'reactstrap';\r\n\r\n\r\nclass NavBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isOpen: false\r\n        }\r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar color=\"dark\" dark  expand=\"md\">\r\n                    <NavbarBrand href=\"/\">MERN Shopping List</NavbarBrand>\r\n                    <NavbarToggler onClick={this.toggle} />\r\n                    <Collapse isOpen={this.state.isOpen} navbar>\r\n                        <Nav className=\"ml-auto\" navbar>\r\n                            <NavItem>\r\n                                <NavLink href=\"#\">GitHub</NavLink>\r\n                            </NavItem>\r\n                        </Nav>\r\n                    </Collapse>\r\n                </Navbar>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBar;","import React, { Component } from 'react';\r\n\r\nimport { Container, ListGroup, ListGroupItem, Button } from 'reactstrap';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport uuid from 'uuid';\r\n\r\nclass ShoppingList extends Component {\r\n    state = {\r\n        items: [\r\n            { id: uuid(), name: \"Eggs\" },\r\n            { id: uuid(), name: \"Milk\" },\r\n            { id: uuid(), name: \"Streak\" },\r\n            { id: uuid(), name: \"Water\" },\r\n        ]\r\n    }\r\n    render() {\r\n        const { items } = this.state;\r\n        return (\r\n            <Container>\r\n                <Button\r\n                    color=\"dark\"\r\n                    style={{ margin: '20px 0 20px 0' }}\r\n                    onClick={() => {\r\n                        const name = prompt(\"Enter name\");\r\n                        if (name) {\r\n                            this.setState(state => ({\r\n                                items: [...state.items, { id: uuid(), name }]\r\n                            }));\r\n\r\n                        }\r\n                    }}\r\n                >\r\n                    Add Item\r\n                </Button>\r\n                <ListGroup>\r\n                    {items.map(({id, name}) => (\r\n                        <CSSTransition key={id} timeout={500} classNames=\"fade\">\r\n                            <ListGroupItem>\r\n                                {name} \r\n                                <Button \r\n                                    classNames=\"remove-btn\"\r\n                                    style={{ margin: '20px ' }}\r\n                                    color=\"danger\"\r\n                                    size=\"sm\"\r\n                                    onClick={() => {\r\n                                        this.setState(state => ({\r\n                                            items: state.items.filter(item => item.id !== id)\r\n                                        }))\r\n                                    }}\r\n                                >\r\n                                    x\r\n                                </Button>\r\n                            </ListGroupItem>\r\n                        </CSSTransition>\r\n                    ))}\r\n                </ListGroup>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ShoppingList;","import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport NavBar from  './components/navbar/NavBar';\r\nimport ShoppingList from  './components/shopping-list/ShoppingList';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <NavBar/>\r\n        <ShoppingList/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}